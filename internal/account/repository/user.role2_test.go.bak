package repository_test

import (
	"regexp"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/go-test/deep"
	"github.com/reshimahendra/gin-starter/internal/account/model"
	"github.com/reshimahendra/gin-starter/internal/account/repository"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type testRole struct {
    id uint
    name string
    description string
}

func TestUserRoleRepositoryGet(t *testing.T) {
    sqlDB, mock, err := sqlmock.New()
    assert.NoError(t, err)


    r := testRole{
        id: 1,
        name: "role1",
        description: "role desc1",
    }

    row := sqlmock.NewRows([]string{"id","name","description"}).
        AddRow(
            r.id,
            r.name,
            r.description,
        )

    q := `SELECT * FROM "Role" WHERE id = $1`

    mock.ExpectQuery(regexp.QuoteMeta(q)).
        WithArgs(r.id).
        WillReturnRows(row)

    db, err := gorm.Open(postgres.New(postgres.Config{Conn: sqlDB}), &gorm.Config{})
    assert.NoError(t, err)

    want := model.Role{
        ID: r.id,
        Name: r.name,
        Description: r.description,
    }

    repo := repository.NewUserRole(db) 
    got, err := repo.Get(r.id)
    assert.NoError(t, err)

    assert.Equal(t, &want, got)

    require.Nil(t, deep.Equal(&want, got))
}

func TestUserRoleRepositoryCreate(t *testing.T) {
    sqlDB, mock, err := sqlmock.New()
    assert.NoError(t, err)
    defer sqlDB.Close()


    r := testRole{
        id: 1,
        name: "role1",
        description: "role desc1",
    }
    row := sqlmock.NewRows([]string{"id", "name", "description"}).
        AddRow(
            r.id,
            r.name,
            r.description,
        )

    mock.ExpectBegin()
    q := `INSERT INTO "Role" ("name","description","id") VALUES ($1,$2,$3) RETURNING "id"`
    mock.ExpectQuery(regexp.QuoteMeta(q)).
        WithArgs(r.name, r.description, r.id).
        WillReturnRows(sqlmock.NewRows([]string{"id"}).AddRow(r.id))
        // WillReturnRows(row)
    mock.ExpectCommit()

    q = `SELECT * FROM "Role" WHERE "Role"."id" = $1`
    mock.ExpectQuery(regexp.QuoteMeta(q)).
        WithArgs(r.id).
        WillReturnRows(row)

    db, err := gorm.Open(postgres.New(postgres.Config{Conn: sqlDB}), &gorm.Config{})
    assert.NoError(t, err)

    want := model.Role{
        ID: r.id,
        Name: r.name,
        Description: r.description,
    }

    repo := repository.NewUserRole(db)
    got, err := repo.Create(model.Role{
        ID: r.id,
        Name: r.name,
        Description: r.description,
    })
    assert.NoError(t, err)
    assert.Equal(t, want.ID, got.ID)
    assert.Equal(t, &want, got)
}
